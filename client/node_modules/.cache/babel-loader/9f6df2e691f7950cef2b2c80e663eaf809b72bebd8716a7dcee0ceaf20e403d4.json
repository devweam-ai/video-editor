{"ast":null,"code":"import _objectSpread from\"/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import axios from'axios';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const ChatContext=/*#__PURE__*/createContext();const initialState={messages:[],currentVideo:null,threadId:null,threads:[],isGenerating:false,error:null};const chatReducer=(state,action)=>{switch(action.type){case'SET_LOADING':return _objectSpread(_objectSpread({},state),{},{isGenerating:action.payload});case'SET_ERROR':return _objectSpread(_objectSpread({},state),{},{error:action.payload,isGenerating:false});case'ADD_MESSAGE':return _objectSpread(_objectSpread({},state),{},{messages:[...state.messages,action.payload],isGenerating:false});case'UPDATE_MESSAGE':return _objectSpread(_objectSpread({},state),{},{messages:state.messages.map(msg=>msg.id===action.payload.id?_objectSpread(_objectSpread({},msg),action.payload.updates):msg)});case'SET_MESSAGES':return _objectSpread(_objectSpread({},state),{},{messages:action.payload});case'SET_CURRENT_VIDEO':return _objectSpread(_objectSpread({},state),{},{currentVideo:action.payload});case'SET_THREAD_ID':return _objectSpread(_objectSpread({},state),{},{threadId:action.payload});case'SET_THREADS':return _objectSpread(_objectSpread({},state),{},{threads:action.payload});case'CLEAR_ERROR':return _objectSpread(_objectSpread({},state),{},{error:null});default:return state;}};export const ChatProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(chatReducer,initialState);// Local storage keys for persistence\nconst STORAGE_KEYS={MESSAGES:'vg_chat_messages',CURRENT_VIDEO:'vg_current_video',THREAD_ID:'vg_chat_thread_id'};// Load persisted chat on first mount\nuseEffect(()=>{// Always start a fresh chat on reload\ntry{localStorage.removeItem(STORAGE_KEYS.MESSAGES);localStorage.removeItem(STORAGE_KEYS.CURRENT_VIDEO);localStorage.removeItem(STORAGE_KEYS.THREAD_ID);}catch(_){}dispatch({type:'SET_MESSAGES',payload:[]});dispatch({type:'SET_CURRENT_VIDEO',payload:null});dispatch({type:'SET_THREAD_ID',payload:null});},[]);// Persist whenever messages or currentVideo change\nuseEffect(()=>{try{localStorage.setItem(STORAGE_KEYS.MESSAGES,JSON.stringify(state.messages));if(state.currentVideo){localStorage.setItem(STORAGE_KEYS.CURRENT_VIDEO,JSON.stringify(state.currentVideo));}if(state.threadId){localStorage.setItem(STORAGE_KEYS.THREAD_ID,state.threadId);}}catch(_){}},[state.messages,state.currentVideo,state.threadId]);const api=axios.create({baseURL:'/api/chat',headers:{'Content-Type':'application/json'},withCredentials:true});// Redirect unauthenticated users to Weam login\napi.interceptors.response.use(response=>response,error=>{var _error$response;const status=error===null||error===void 0?void 0:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status;if(status===401){window.location.href='https://app.weam.ai/login';return;}return Promise.reject(error);});const sendMessage=async function(message){let chatHistory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let opts=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{dispatch({type:'SET_LOADING',payload:true});dispatch({type:'CLEAR_ERROR'});// Add user message immediately\nconst userMessage={id:Date.now(),type:'user',content:message,timestamp:new Date()};dispatch({type:'ADD_MESSAGE',payload:userMessage});// Send to intelligent chat API\nconst response=await api.post('/',{message,chatHistory:chatHistory.map(msg=>({type:msg.type,content:msg.content,timestamp:msg.timestamp})),currentVideo:state.currentVideo,// pass UI selections\nquality:opts.quality,duration:opts.duration,aspectRatio:opts.aspectRatio,threadId:state.threadId});const aiResponse={// Use videoId as the message id so polling updates this same message\nid:response.data.videoId||Date.now()+1,type:response.data.type||'conversation',content:response.data.content,timestamp:new Date(),intent:response.data.intent,confidence:response.data.confidence,videoId:response.data.videoId,status:response.data.status,enhancedPrompt:response.data.enhancedPrompt,originalPrompt:response.data.originalPrompt,model:response.data.model,isEnhancement:response.data.type==='video_enhancement'};if(response.data.threadId&&response.data.threadId!==state.threadId){dispatch({type:'SET_THREAD_ID',payload:response.data.threadId});}dispatch({type:'ADD_MESSAGE',payload:aiResponse});// If it's a video generation/enhancement, start polling\nif(response.data.videoId){pollVideoStatus(response.data.videoId);}return aiResponse;}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message;dispatch({type:'SET_ERROR',payload:errorMessage});// Add error message to chat\nconst errorResponse={id:Date.now()+1,type:'error',content:\"Sorry, I encountered an error: \".concat(errorMessage),timestamp:new Date(),isError:true};dispatch({type:'ADD_MESSAGE',payload:errorResponse});toast.error(\"Chat error: \".concat(errorMessage));throw error;}};const pollVideoStatus=async function(videoId){let maxAttempts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:60;let attempts=0;const pollInterval=3000;// 3 seconds\nconst poll=async()=>{try{const response=await api.get(\"/video/\".concat(videoId,\"/status\"));const videoStatus=response.data;// Update the message with video status\ndispatch({type:'UPDATE_MESSAGE',payload:{id:videoId,// Use videoId as the message identifier\nupdates:{status:videoStatus.status,videoUrl:videoStatus.videoUrl,progress:videoStatus.progress,errorMessage:videoStatus.errorMessage,enhancedPrompt:videoStatus.enhancedPrompt,originalPrompt:videoStatus.originalPrompt,model:videoStatus.model}}});if(videoStatus.status==='completed'){toast.success('ðŸŽ‰ Your video is ready!',{duration:6000});return;}if(videoStatus.status==='failed'){toast.error(\"Video generation failed: \".concat(videoStatus.errorMessage||'Unknown error'),{duration:8000});return;}attempts++;if(attempts<maxAttempts){setTimeout(poll,pollInterval);}else{toast.error('Video generation timed out. Please try again.',{duration:8000});}}catch(error){console.error('Error polling video status:',error);attempts++;if(attempts<maxAttempts){setTimeout(poll,pollInterval);}else{toast.error('Lost connection to video generation. Please refresh the page.',{duration:8000});}}};poll();};const fetchThreads=async()=>{try{const res=await api.get('/threads');dispatch({type:'SET_THREADS',payload:res.data.threads||[]});}catch(e){console.error('Failed to fetch threads',e);}};const openThread=async threadId=>{try{const res=await api.get(\"/threads/\".concat(threadId));const thread=res.data;const revived=(thread.messages||[]).map(m=>_objectSpread(_objectSpread({},m),{},{timestamp:m.timestamp?new Date(m.timestamp):new Date()}));dispatch({type:'SET_MESSAGES',payload:revived});dispatch({type:'SET_THREAD_ID',payload:thread.threadId});// If thread is linked to a video, set it as currentVideo skeleton\nif(thread.videoId){dispatch({type:'SET_CURRENT_VIDEO',payload:{videoId:thread.videoId}});}}catch(e){console.error('Failed to open thread',e);}};const startNewThread=()=>{dispatch({type:'SET_MESSAGES',payload:[]});dispatch({type:'SET_CURRENT_VIDEO',payload:null});dispatch({type:'SET_THREAD_ID',payload:null});// Also create an empty server-side thread so it appears in history immediately\n(async()=>{try{var _res$data;const res=await api.post('/threads',{title:'New chat'});await fetchThreads();if((_res$data=res.data)!==null&&_res$data!==void 0&&_res$data.threadId){dispatch({type:'SET_THREAD_ID',payload:res.data.threadId});}}catch(e){// Ignore creating empty thread failures silently\n}})();};const clearMessages=()=>{dispatch({type:'SET_MESSAGES',payload:[]});};const setCurrentVideo=video=>{dispatch({type:'SET_CURRENT_VIDEO',payload:video});};const openChatForVideo=video=>{// If switching to a different video, seed an initial assistant message\nif(!state.currentVideo||state.currentVideo.videoId!==video.videoId){const seed=[{id:Date.now(),type:'ai',content:\"Here's your video: \\\"\".concat(video.title||'Untitled Video',\"\\\". You can ask me to enhance it, modify it, or create variations. What would you like to do?\"),timestamp:new Date(),videoUrl:video.videoUrl,videoId:video.videoId,status:video.status}];dispatch({type:'SET_MESSAGES',payload:seed});}dispatch({type:'SET_CURRENT_VIDEO',payload:video});};const clearError=()=>{dispatch({type:'CLEAR_ERROR'});};const value=_objectSpread(_objectSpread({},state),{},{sendMessage,fetchThreads,openThread,startNewThread,clearMessages,setCurrentVideo,openChatForVideo,clearError});return/*#__PURE__*/_jsx(ChatContext.Provider,{value:value,children:children});};export const useChat=()=>{const context=useContext(ChatContext);if(!context){throw new Error('useChat must be used within a ChatProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","jsx","_jsx","ChatContext","initialState","messages","currentVideo","threadId","threads","isGenerating","error","chatReducer","state","action","type","_objectSpread","payload","map","msg","id","updates","ChatProvider","_ref","children","dispatch","STORAGE_KEYS","MESSAGES","CURRENT_VIDEO","THREAD_ID","localStorage","removeItem","_","setItem","JSON","stringify","api","create","baseURL","headers","withCredentials","interceptors","response","use","_error$response","status","window","location","href","Promise","reject","sendMessage","message","chatHistory","arguments","length","undefined","opts","userMessage","Date","now","content","timestamp","post","quality","duration","aspectRatio","aiResponse","data","videoId","intent","confidence","enhancedPrompt","originalPrompt","model","isEnhancement","pollVideoStatus","_error$response2","_error$response2$data","errorMessage","errorResponse","concat","isError","maxAttempts","attempts","pollInterval","poll","get","videoStatus","videoUrl","progress","success","setTimeout","console","fetchThreads","res","e","openThread","thread","revived","m","startNewThread","_res$data","title","clearMessages","setCurrentVideo","video","openChatForVideo","seed","clearError","value","Provider","useChat","context","Error"],"sources":["/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst ChatContext = createContext();\n\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  threadId: null,\n  threads: [],\n  isGenerating: false,\n  error: null\n};\n\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isGenerating: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, isGenerating: false };\n    case 'ADD_MESSAGE':\n      return { \n        ...state, \n        messages: [...state.messages, action.payload],\n        isGenerating: false \n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => \n          msg.id === action.payload.id ? { ...msg, ...action.payload.updates } : msg\n        )\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'SET_CURRENT_VIDEO':\n      return { ...state, currentVideo: action.payload };\n    case 'SET_THREAD_ID':\n      return { ...state, threadId: action.payload };\n    case 'SET_THREADS':\n      return { ...state, threads: action.payload };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Local storage keys for persistence\n  const STORAGE_KEYS = {\n    MESSAGES: 'vg_chat_messages',\n    CURRENT_VIDEO: 'vg_current_video',\n    THREAD_ID: 'vg_chat_thread_id'\n  };\n\n  // Load persisted chat on first mount\n  useEffect(() => {\n    // Always start a fresh chat on reload\n    try {\n      localStorage.removeItem(STORAGE_KEYS.MESSAGES);\n      localStorage.removeItem(STORAGE_KEYS.CURRENT_VIDEO);\n      localStorage.removeItem(STORAGE_KEYS.THREAD_ID);\n    } catch (_) {}\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: null });\n    dispatch({ type: 'SET_THREAD_ID', payload: null });\n  }, []);\n\n  // Persist whenever messages or currentVideo change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MESSAGES, JSON.stringify(state.messages));\n      if (state.currentVideo) {\n        localStorage.setItem(STORAGE_KEYS.CURRENT_VIDEO, JSON.stringify(state.currentVideo));\n      }\n      if (state.threadId) {\n        localStorage.setItem(STORAGE_KEYS.THREAD_ID, state.threadId);\n      }\n    } catch (_) {}\n  }, [state.messages, state.currentVideo, state.threadId]);\n\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n\n  // Redirect unauthenticated users to Weam login\n  api.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      const status = error?.response?.status;\n      if (status === 401) {\n        window.location.href = 'https://app.weam.ai/login';\n        return;\n      }\n      return Promise.reject(error);\n    }\n  );\n\n  const sendMessage = async (message, chatHistory = [], opts = {}) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: userMessage });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo,\n        // pass UI selections\n        quality: opts.quality,\n        duration: opts.duration,\n        aspectRatio: opts.aspectRatio,\n        threadId: state.threadId\n      });\n\n      const aiResponse = {\n        // Use videoId as the message id so polling updates this same message\n        id: response.data.videoId || (Date.now() + 1),\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n\n      if (response.data.threadId && response.data.threadId !== state.threadId) {\n        dispatch({ type: 'SET_THREAD_ID', payload: response.data.threadId });\n      }\n\n      dispatch({ type: 'ADD_MESSAGE', payload: aiResponse });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n\n      return aiResponse;\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || error.message;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      \n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: errorResponse });\n      \n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({ \n          type: 'UPDATE_MESSAGE', \n          payload: {\n            id: videoId, // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000,\n          });\n          return;\n        }\n\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000,\n          });\n          return;\n        }\n\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000,\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000,\n          });\n        }\n      }\n    };\n\n    poll();\n  };\n\n  const fetchThreads = async () => {\n    try {\n      const res = await api.get('/threads');\n      dispatch({ type: 'SET_THREADS', payload: res.data.threads || [] });\n    } catch (e) {\n      console.error('Failed to fetch threads', e);\n    }\n  };\n\n  const openThread = async (threadId) => {\n    try {\n      const res = await api.get(`/threads/${threadId}`);\n      const thread = res.data;\n      const revived = (thread.messages || []).map(m => ({\n        ...m,\n        timestamp: m.timestamp ? new Date(m.timestamp) : new Date()\n      }));\n      dispatch({ type: 'SET_MESSAGES', payload: revived });\n      dispatch({ type: 'SET_THREAD_ID', payload: thread.threadId });\n      // If thread is linked to a video, set it as currentVideo skeleton\n      if (thread.videoId) {\n        dispatch({ type: 'SET_CURRENT_VIDEO', payload: { videoId: thread.videoId } });\n      }\n    } catch (e) {\n      console.error('Failed to open thread', e);\n    }\n  };\n\n  const startNewThread = () => {\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: null });\n    dispatch({ type: 'SET_THREAD_ID', payload: null });\n    // Also create an empty server-side thread so it appears in history immediately\n    (async () => {\n      try {\n        const res = await api.post('/threads', { title: 'New chat' });\n        await fetchThreads();\n        if (res.data?.threadId) {\n          dispatch({ type: 'SET_THREAD_ID', payload: res.data.threadId });\n        }\n      } catch (e) {\n        // Ignore creating empty thread failures silently\n      }\n    })();\n  };\n\n  const clearMessages = () => {\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n  };\n\n  const setCurrentVideo = (video) => {\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const openChatForVideo = (video) => {\n    // If switching to a different video, seed an initial assistant message\n    if (!state.currentVideo || state.currentVideo.videoId !== video.videoId) {\n      const seed = [\n        {\n          id: Date.now(),\n          type: 'ai',\n          content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n          timestamp: new Date(),\n          videoUrl: video.videoUrl,\n          videoId: video.videoId,\n          status: video.status\n        }\n      ];\n      dispatch({ type: 'SET_MESSAGES', payload: seed });\n    }\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    sendMessage,\n    fetchThreads,\n    openThread,\n    startNewThread,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}