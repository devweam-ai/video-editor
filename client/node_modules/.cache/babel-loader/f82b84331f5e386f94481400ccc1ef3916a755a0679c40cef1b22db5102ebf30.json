{"ast":null,"code":"var _jsxFileName = \"/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  threadId: null,\n  threads: [],\n  isGenerating: false,\n  error: null\n};\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isGenerating: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        isGenerating: false\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n        isGenerating: false\n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => msg.id === action.payload.id ? {\n          ...msg,\n          ...action.payload.updates\n        } : msg)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'SET_CURRENT_VIDEO':\n      return {\n        ...state,\n        currentVideo: action.payload\n      };\n    case 'SET_THREAD_ID':\n      return {\n        ...state,\n        threadId: action.payload\n      };\n    case 'SET_THREADS':\n      return {\n        ...state,\n        threads: action.payload\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Local storage keys for persistence\n  const STORAGE_KEYS = {\n    MESSAGES: 'vg_chat_messages',\n    CURRENT_VIDEO: 'vg_current_video',\n    THREAD_ID: 'vg_chat_thread_id'\n  };\n\n  // Load persisted chat on first mount\n  useEffect(() => {\n    // Always start a fresh chat on reload\n    try {\n      localStorage.removeItem(STORAGE_KEYS.MESSAGES);\n      localStorage.removeItem(STORAGE_KEYS.CURRENT_VIDEO);\n      localStorage.removeItem(STORAGE_KEYS.THREAD_ID);\n    } catch (_) {}\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: null\n    });\n    dispatch({\n      type: 'SET_THREAD_ID',\n      payload: null\n    });\n  }, []);\n\n  // Persist whenever messages or currentVideo change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MESSAGES, JSON.stringify(state.messages));\n      if (state.currentVideo) {\n        localStorage.setItem(STORAGE_KEYS.CURRENT_VIDEO, JSON.stringify(state.currentVideo));\n      }\n      if (state.threadId) {\n        localStorage.setItem(STORAGE_KEYS.THREAD_ID, state.threadId);\n      }\n    } catch (_) {}\n  }, [state.messages, state.currentVideo, state.threadId]);\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n\n  // Redirect unauthenticated users to Weam login\n  api.interceptors.response.use(response => response, error => {\n    var _error$response;\n    const status = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n    if (status === 401) {\n      window.location.href = 'https://app.weam.ai/login';\n      return;\n    }\n    return Promise.reject(error);\n  });\n  const sendMessage = async (message, chatHistory = [], opts = {}) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: userMessage\n      });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo,\n        // pass UI selections\n        quality: opts.quality,\n        duration: opts.duration,\n        aspectRatio: opts.aspectRatio,\n        threadId: state.threadId\n      });\n      const aiResponse = {\n        // Use videoId as the message id so polling updates this same message\n        id: response.data.videoId || Date.now() + 1,\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n      if (response.data.threadId && response.data.threadId !== state.threadId) {\n        dispatch({\n          type: 'SET_THREAD_ID',\n          payload: response.data.threadId\n        });\n      }\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: aiResponse\n      });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n      return aiResponse;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n\n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: errorResponse\n      });\n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({\n          type: 'UPDATE_MESSAGE',\n          payload: {\n            id: videoId,\n            // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000\n          });\n          return;\n        }\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000\n          });\n          return;\n        }\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000\n          });\n        }\n      }\n    };\n    poll();\n  };\n  const fetchThreads = async () => {\n    try {\n      const res = await api.get('/threads');\n      dispatch({\n        type: 'SET_THREADS',\n        payload: res.data.threads || []\n      });\n    } catch (e) {\n      console.error('Failed to fetch threads', e);\n    }\n  };\n  const openThread = async threadId => {\n    try {\n      const res = await api.get(`/threads/${threadId}`);\n      const thread = res.data;\n      const revived = (thread.messages || []).map(m => ({\n        ...m,\n        timestamp: m.timestamp ? new Date(m.timestamp) : new Date()\n      }));\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: revived\n      });\n      dispatch({\n        type: 'SET_THREAD_ID',\n        payload: thread.threadId\n      });\n      // If thread is linked to a video, set it as currentVideo skeleton\n      if (thread.videoId) {\n        dispatch({\n          type: 'SET_CURRENT_VIDEO',\n          payload: {\n            videoId: thread.videoId\n          }\n        });\n      }\n    } catch (e) {\n      console.error('Failed to open thread', e);\n    }\n  };\n  const startNewThread = () => {\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: null\n    });\n    dispatch({\n      type: 'SET_THREAD_ID',\n      payload: null\n    });\n    // Also create an empty server-side thread so it appears in history immediately\n    (async () => {\n      try {\n        var _res$data;\n        const res = await api.post('/threads', {\n          title: 'New chat'\n        });\n        await fetchThreads();\n        if ((_res$data = res.data) !== null && _res$data !== void 0 && _res$data.threadId) {\n          dispatch({\n            type: 'SET_THREAD_ID',\n            payload: res.data.threadId\n          });\n        }\n      } catch (e) {\n        // Ignore creating empty thread failures silently\n      }\n    })();\n  };\n  const clearMessages = () => {\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n  };\n  const setCurrentVideo = video => {\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: video\n    });\n  };\n  const openChatForVideo = video => {\n    // If switching to a different video, seed an initial assistant message\n    if (!state.currentVideo || state.currentVideo.videoId !== video.videoId) {\n      const seed = [{\n        id: Date.now(),\n        type: 'ai',\n        content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n        timestamp: new Date(),\n        videoUrl: video.videoUrl,\n        videoId: video.videoId,\n        status: video.status\n      }];\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: seed\n      });\n    }\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: video\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    sendMessage,\n    fetchThreads,\n    openThread,\n    startNewThread,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","jsxDEV","_jsxDEV","ChatContext","initialState","messages","currentVideo","threadId","threads","isGenerating","error","chatReducer","state","action","type","payload","map","msg","id","updates","ChatProvider","children","_s","dispatch","STORAGE_KEYS","MESSAGES","CURRENT_VIDEO","THREAD_ID","localStorage","removeItem","_","setItem","JSON","stringify","api","create","baseURL","headers","withCredentials","interceptors","response","use","_error$response","status","window","location","href","Promise","reject","sendMessage","message","chatHistory","opts","userMessage","Date","now","content","timestamp","post","quality","duration","aspectRatio","aiResponse","data","videoId","intent","confidence","enhancedPrompt","originalPrompt","model","isEnhancement","pollVideoStatus","_error$response2","_error$response2$data","errorMessage","errorResponse","isError","maxAttempts","attempts","pollInterval","poll","get","videoStatus","videoUrl","progress","success","setTimeout","console","fetchThreads","res","e","openThread","thread","revived","m","startNewThread","_res$data","title","clearMessages","setCurrentVideo","video","openChatForVideo","seed","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst ChatContext = createContext();\n\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  threadId: null,\n  threads: [],\n  isGenerating: false,\n  error: null\n};\n\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isGenerating: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, isGenerating: false };\n    case 'ADD_MESSAGE':\n      return { \n        ...state, \n        messages: [...state.messages, action.payload],\n        isGenerating: false \n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => \n          msg.id === action.payload.id ? { ...msg, ...action.payload.updates } : msg\n        )\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'SET_CURRENT_VIDEO':\n      return { ...state, currentVideo: action.payload };\n    case 'SET_THREAD_ID':\n      return { ...state, threadId: action.payload };\n    case 'SET_THREADS':\n      return { ...state, threads: action.payload };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Local storage keys for persistence\n  const STORAGE_KEYS = {\n    MESSAGES: 'vg_chat_messages',\n    CURRENT_VIDEO: 'vg_current_video',\n    THREAD_ID: 'vg_chat_thread_id'\n  };\n\n  // Load persisted chat on first mount\n  useEffect(() => {\n    // Always start a fresh chat on reload\n    try {\n      localStorage.removeItem(STORAGE_KEYS.MESSAGES);\n      localStorage.removeItem(STORAGE_KEYS.CURRENT_VIDEO);\n      localStorage.removeItem(STORAGE_KEYS.THREAD_ID);\n    } catch (_) {}\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: null });\n    dispatch({ type: 'SET_THREAD_ID', payload: null });\n  }, []);\n\n  // Persist whenever messages or currentVideo change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MESSAGES, JSON.stringify(state.messages));\n      if (state.currentVideo) {\n        localStorage.setItem(STORAGE_KEYS.CURRENT_VIDEO, JSON.stringify(state.currentVideo));\n      }\n      if (state.threadId) {\n        localStorage.setItem(STORAGE_KEYS.THREAD_ID, state.threadId);\n      }\n    } catch (_) {}\n  }, [state.messages, state.currentVideo, state.threadId]);\n\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n\n  // Redirect unauthenticated users to Weam login\n  api.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      const status = error?.response?.status;\n      if (status === 401) {\n        window.location.href = 'https://app.weam.ai/login';\n        return;\n      }\n      return Promise.reject(error);\n    }\n  );\n\n  const sendMessage = async (message, chatHistory = [], opts = {}) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: userMessage });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo,\n        // pass UI selections\n        quality: opts.quality,\n        duration: opts.duration,\n        aspectRatio: opts.aspectRatio,\n        threadId: state.threadId\n      });\n\n      const aiResponse = {\n        // Use videoId as the message id so polling updates this same message\n        id: response.data.videoId || (Date.now() + 1),\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n\n      if (response.data.threadId && response.data.threadId !== state.threadId) {\n        dispatch({ type: 'SET_THREAD_ID', payload: response.data.threadId });\n      }\n\n      dispatch({ type: 'ADD_MESSAGE', payload: aiResponse });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n\n      return aiResponse;\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || error.message;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      \n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: errorResponse });\n      \n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({ \n          type: 'UPDATE_MESSAGE', \n          payload: {\n            id: videoId, // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000,\n          });\n          return;\n        }\n\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000,\n          });\n          return;\n        }\n\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000,\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000,\n          });\n        }\n      }\n    };\n\n    poll();\n  };\n\n  const fetchThreads = async () => {\n    try {\n      const res = await api.get('/threads');\n      dispatch({ type: 'SET_THREADS', payload: res.data.threads || [] });\n    } catch (e) {\n      console.error('Failed to fetch threads', e);\n    }\n  };\n\n  const openThread = async (threadId) => {\n    try {\n      const res = await api.get(`/threads/${threadId}`);\n      const thread = res.data;\n      const revived = (thread.messages || []).map(m => ({\n        ...m,\n        timestamp: m.timestamp ? new Date(m.timestamp) : new Date()\n      }));\n      dispatch({ type: 'SET_MESSAGES', payload: revived });\n      dispatch({ type: 'SET_THREAD_ID', payload: thread.threadId });\n      // If thread is linked to a video, set it as currentVideo skeleton\n      if (thread.videoId) {\n        dispatch({ type: 'SET_CURRENT_VIDEO', payload: { videoId: thread.videoId } });\n      }\n    } catch (e) {\n      console.error('Failed to open thread', e);\n    }\n  };\n\n  const startNewThread = () => {\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: null });\n    dispatch({ type: 'SET_THREAD_ID', payload: null });\n    // Also create an empty server-side thread so it appears in history immediately\n    (async () => {\n      try {\n        const res = await api.post('/threads', { title: 'New chat' });\n        await fetchThreads();\n        if (res.data?.threadId) {\n          dispatch({ type: 'SET_THREAD_ID', payload: res.data.threadId });\n        }\n      } catch (e) {\n        // Ignore creating empty thread failures silently\n      }\n    })();\n  };\n\n  const clearMessages = () => {\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n  };\n\n  const setCurrentVideo = (video) => {\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const openChatForVideo = (video) => {\n    // If switching to a different video, seed an initial assistant message\n    if (!state.currentVideo || state.currentVideo.videoId !== video.videoId) {\n      const seed = [\n        {\n          id: Date.now(),\n          type: 'ai',\n          content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n          timestamp: new Date(),\n          videoUrl: video.videoUrl,\n          videoId: video.videoId,\n          status: video.status\n        }\n      ];\n      dispatch({ type: 'SET_MESSAGES', payload: seed });\n    }\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    sendMessage,\n    fetchThreads,\n    openThread,\n    startNewThread,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}