{"ast":null,"code":"var _jsxFileName = \"/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  isGenerating: false,\n  error: null\n};\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isGenerating: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        isGenerating: false\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n        isGenerating: false\n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => msg.id === action.payload.id ? {\n          ...msg,\n          ...action.payload.updates\n        } : msg)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'SET_CURRENT_VIDEO':\n      return {\n        ...state,\n        currentVideo: action.payload\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const sendMessage = async (message, chatHistory = []) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: userMessage\n      });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo\n      });\n      const aiResponse = {\n        id: Date.now() + 1,\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: aiResponse\n      });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n      return aiResponse;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n\n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: errorResponse\n      });\n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({\n          type: 'UPDATE_MESSAGE',\n          payload: {\n            id: videoId,\n            // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000\n          });\n          return;\n        }\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000\n          });\n          return;\n        }\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000\n          });\n        }\n      }\n    };\n    poll();\n  };\n  const clearMessages = () => {\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n  };\n  const setCurrentVideo = video => {\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: video\n    });\n  };\n  const openChatForVideo = video => {\n    // Seed chat with a helpful AI message referencing the selected video\n    const seed = [{\n      id: Date.now(),\n      type: 'ai',\n      content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n      timestamp: new Date(),\n      videoUrl: video.videoUrl,\n      videoId: video.videoId,\n      status: video.status\n    }];\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: seed\n    });\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: video\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    sendMessage,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","jsxDEV","_jsxDEV","ChatContext","initialState","messages","currentVideo","isGenerating","error","chatReducer","state","action","type","payload","map","msg","id","updates","ChatProvider","children","_s","dispatch","api","create","baseURL","headers","sendMessage","message","chatHistory","userMessage","Date","now","content","timestamp","response","post","aiResponse","data","intent","confidence","videoId","status","enhancedPrompt","originalPrompt","model","isEnhancement","pollVideoStatus","_error$response","_error$response$data","errorMessage","errorResponse","isError","maxAttempts","attempts","pollInterval","poll","get","videoStatus","videoUrl","progress","success","duration","setTimeout","console","clearMessages","setCurrentVideo","video","openChatForVideo","seed","title","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst ChatContext = createContext();\n\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  isGenerating: false,\n  error: null\n};\n\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isGenerating: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, isGenerating: false };\n    case 'ADD_MESSAGE':\n      return { \n        ...state, \n        messages: [...state.messages, action.payload],\n        isGenerating: false \n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => \n          msg.id === action.payload.id ? { ...msg, ...action.payload.updates } : msg\n        )\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'SET_CURRENT_VIDEO':\n      return { ...state, currentVideo: action.payload };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  const sendMessage = async (message, chatHistory = []) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: userMessage });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo\n      });\n\n      const aiResponse = {\n        id: Date.now() + 1,\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n\n      dispatch({ type: 'ADD_MESSAGE', payload: aiResponse });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n\n      return aiResponse;\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || error.message;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      \n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: errorResponse });\n      \n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({ \n          type: 'UPDATE_MESSAGE', \n          payload: {\n            id: videoId, // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000,\n          });\n          return;\n        }\n\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000,\n          });\n          return;\n        }\n\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000,\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000,\n          });\n        }\n      }\n    };\n\n    poll();\n  };\n\n  const clearMessages = () => {\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n  };\n\n  const setCurrentVideo = (video) => {\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const openChatForVideo = (video) => {\n    // Seed chat with a helpful AI message referencing the selected video\n    const seed = [\n      {\n        id: Date.now(),\n        type: 'ai',\n        content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n        timestamp: new Date(),\n        videoUrl: video.videoUrl,\n        videoId: video.videoId,\n        status: video.status\n      }\n    ];\n    dispatch({ type: 'SET_MESSAGES', payload: seed });\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    sendMessage,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}