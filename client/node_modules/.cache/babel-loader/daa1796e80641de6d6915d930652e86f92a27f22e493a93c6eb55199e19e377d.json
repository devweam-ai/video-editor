{"ast":null,"code":"var _jsxFileName = \"/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  isGenerating: false,\n  error: null\n};\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isGenerating: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        isGenerating: false\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n        isGenerating: false\n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => msg.id === action.payload.id ? {\n          ...msg,\n          ...action.payload.updates\n        } : msg)\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'SET_CURRENT_VIDEO':\n      return {\n        ...state,\n        currentVideo: action.payload\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Local storage keys for persistence\n  const STORAGE_KEYS = {\n    MESSAGES: 'vg_chat_messages',\n    CURRENT_VIDEO: 'vg_current_video'\n  };\n\n  // Load persisted chat on first mount\n  useEffect(() => {\n    try {\n      const savedMessages = localStorage.getItem(STORAGE_KEYS.MESSAGES);\n      const savedVideo = localStorage.getItem(STORAGE_KEYS.CURRENT_VIDEO);\n      if (savedMessages) {\n        const parsed = JSON.parse(savedMessages);\n        // Revive timestamps to Date\n        const revived = Array.isArray(parsed) ? parsed.map(m => ({\n          ...m,\n          timestamp: m.timestamp ? new Date(m.timestamp) : new Date()\n        })) : [];\n        dispatch({\n          type: 'SET_MESSAGES',\n          payload: revived\n        });\n      }\n      if (savedVideo) {\n        dispatch({\n          type: 'SET_CURRENT_VIDEO',\n          payload: JSON.parse(savedVideo)\n        });\n      }\n    } catch (_) {}\n  }, []);\n\n  // Persist whenever messages or currentVideo change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MESSAGES, JSON.stringify(state.messages));\n      if (state.currentVideo) {\n        localStorage.setItem(STORAGE_KEYS.CURRENT_VIDEO, JSON.stringify(state.currentVideo));\n      }\n    } catch (_) {}\n  }, [state.messages, state.currentVideo]);\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const sendMessage = async (message, chatHistory = []) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: userMessage\n      });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo\n      });\n      const aiResponse = {\n        // Use videoId as the message id so polling updates this same message\n        id: response.data.videoId || Date.now() + 1,\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: aiResponse\n      });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n      return aiResponse;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n\n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: errorResponse\n      });\n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({\n          type: 'UPDATE_MESSAGE',\n          payload: {\n            id: videoId,\n            // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000\n          });\n          return;\n        }\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000\n          });\n          return;\n        }\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000\n          });\n        }\n      }\n    };\n    poll();\n  };\n  const clearMessages = () => {\n    dispatch({\n      type: 'SET_MESSAGES',\n      payload: []\n    });\n  };\n  const setCurrentVideo = video => {\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: video\n    });\n  };\n  const openChatForVideo = video => {\n    // If switching to a different video, seed an initial assistant message\n    if (!state.currentVideo || state.currentVideo.videoId !== video.videoId) {\n      const seed = [{\n        id: Date.now(),\n        type: 'ai',\n        content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n        timestamp: new Date(),\n        videoUrl: video.videoUrl,\n        videoId: video.videoId,\n        status: video.status\n      }];\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: seed\n      });\n    }\n    dispatch({\n      type: 'SET_CURRENT_VIDEO',\n      payload: video\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    sendMessage,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","jsxDEV","_jsxDEV","ChatContext","initialState","messages","currentVideo","isGenerating","error","chatReducer","state","action","type","payload","map","msg","id","updates","ChatProvider","children","_s","dispatch","STORAGE_KEYS","MESSAGES","CURRENT_VIDEO","savedMessages","localStorage","getItem","savedVideo","parsed","JSON","parse","revived","Array","isArray","m","timestamp","Date","_","setItem","stringify","api","create","baseURL","headers","sendMessage","message","chatHistory","userMessage","now","content","response","post","aiResponse","data","videoId","intent","confidence","status","enhancedPrompt","originalPrompt","model","isEnhancement","pollVideoStatus","_error$response","_error$response$data","errorMessage","errorResponse","isError","maxAttempts","attempts","pollInterval","poll","get","videoStatus","videoUrl","progress","success","duration","setTimeout","console","clearMessages","setCurrentVideo","video","openChatForVideo","seed","title","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["/Users/kshitijvarma/Desktop/ai-doc-editor/AI-VideoGen/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst ChatContext = createContext();\n\nconst initialState = {\n  messages: [],\n  currentVideo: null,\n  isGenerating: false,\n  error: null\n};\n\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isGenerating: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, isGenerating: false };\n    case 'ADD_MESSAGE':\n      return { \n        ...state, \n        messages: [...state.messages, action.payload],\n        isGenerating: false \n      };\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        messages: state.messages.map(msg => \n          msg.id === action.payload.id ? { ...msg, ...action.payload.updates } : msg\n        )\n      };\n    case 'SET_MESSAGES':\n      return { ...state, messages: action.payload };\n    case 'SET_CURRENT_VIDEO':\n      return { ...state, currentVideo: action.payload };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Local storage keys for persistence\n  const STORAGE_KEYS = {\n    MESSAGES: 'vg_chat_messages',\n    CURRENT_VIDEO: 'vg_current_video'\n  };\n\n  // Load persisted chat on first mount\n  useEffect(() => {\n    try {\n      const savedMessages = localStorage.getItem(STORAGE_KEYS.MESSAGES);\n      const savedVideo = localStorage.getItem(STORAGE_KEYS.CURRENT_VIDEO);\n      if (savedMessages) {\n        const parsed = JSON.parse(savedMessages);\n        // Revive timestamps to Date\n        const revived = Array.isArray(parsed)\n          ? parsed.map(m => ({ ...m, timestamp: m.timestamp ? new Date(m.timestamp) : new Date() }))\n          : [];\n        dispatch({ type: 'SET_MESSAGES', payload: revived });\n      }\n      if (savedVideo) {\n        dispatch({ type: 'SET_CURRENT_VIDEO', payload: JSON.parse(savedVideo) });\n      }\n    } catch (_) {}\n  }, []);\n\n  // Persist whenever messages or currentVideo change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MESSAGES, JSON.stringify(state.messages));\n      if (state.currentVideo) {\n        localStorage.setItem(STORAGE_KEYS.CURRENT_VIDEO, JSON.stringify(state.currentVideo));\n      }\n    } catch (_) {}\n  }, [state.messages, state.currentVideo]);\n\n  const api = axios.create({\n    baseURL: '/api/chat',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  const sendMessage = async (message, chatHistory = []) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n\n      // Add user message immediately\n      const userMessage = {\n        id: Date.now(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: userMessage });\n\n      // Send to intelligent chat API\n      const response = await api.post('/', {\n        message,\n        chatHistory: chatHistory.map(msg => ({\n          type: msg.type,\n          content: msg.content,\n          timestamp: msg.timestamp\n        })),\n        currentVideo: state.currentVideo\n      });\n\n      const aiResponse = {\n        // Use videoId as the message id so polling updates this same message\n        id: response.data.videoId || (Date.now() + 1),\n        type: response.data.type || 'conversation',\n        content: response.data.content,\n        timestamp: new Date(),\n        intent: response.data.intent,\n        confidence: response.data.confidence,\n        videoId: response.data.videoId,\n        status: response.data.status,\n        enhancedPrompt: response.data.enhancedPrompt,\n        originalPrompt: response.data.originalPrompt,\n        model: response.data.model,\n        isEnhancement: response.data.type === 'video_enhancement'\n      };\n\n      dispatch({ type: 'ADD_MESSAGE', payload: aiResponse });\n\n      // If it's a video generation/enhancement, start polling\n      if (response.data.videoId) {\n        pollVideoStatus(response.data.videoId);\n      }\n\n      return aiResponse;\n\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || error.message;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      \n      // Add error message to chat\n      const errorResponse = {\n        id: Date.now() + 1,\n        type: 'error',\n        content: `Sorry, I encountered an error: ${errorMessage}`,\n        timestamp: new Date(),\n        isError: true\n      };\n      dispatch({ type: 'ADD_MESSAGE', payload: errorResponse });\n      \n      toast.error(`Chat error: ${errorMessage}`);\n      throw error;\n    }\n  };\n\n  const pollVideoStatus = async (videoId, maxAttempts = 60) => {\n    let attempts = 0;\n    const pollInterval = 3000; // 3 seconds\n\n    const poll = async () => {\n      try {\n        const response = await api.get(`/video/${videoId}/status`);\n        const videoStatus = response.data;\n\n        // Update the message with video status\n        dispatch({ \n          type: 'UPDATE_MESSAGE', \n          payload: {\n            id: videoId, // Use videoId as the message identifier\n            updates: {\n              status: videoStatus.status,\n              videoUrl: videoStatus.videoUrl,\n              progress: videoStatus.progress,\n              errorMessage: videoStatus.errorMessage,\n              enhancedPrompt: videoStatus.enhancedPrompt,\n              originalPrompt: videoStatus.originalPrompt,\n              model: videoStatus.model\n            }\n          }\n        });\n\n        if (videoStatus.status === 'completed') {\n          toast.success('ðŸŽ‰ Your video is ready!', {\n            duration: 6000,\n          });\n          return;\n        }\n\n        if (videoStatus.status === 'failed') {\n          toast.error(`Video generation failed: ${videoStatus.errorMessage || 'Unknown error'}`, {\n            duration: 8000,\n          });\n          return;\n        }\n\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Video generation timed out. Please try again.', {\n            duration: 8000,\n          });\n        }\n      } catch (error) {\n        console.error('Error polling video status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, pollInterval);\n        } else {\n          toast.error('Lost connection to video generation. Please refresh the page.', {\n            duration: 8000,\n          });\n        }\n      }\n    };\n\n    poll();\n  };\n\n  const clearMessages = () => {\n    dispatch({ type: 'SET_MESSAGES', payload: [] });\n  };\n\n  const setCurrentVideo = (video) => {\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const openChatForVideo = (video) => {\n    // If switching to a different video, seed an initial assistant message\n    if (!state.currentVideo || state.currentVideo.videoId !== video.videoId) {\n      const seed = [\n        {\n          id: Date.now(),\n          type: 'ai',\n          content: `Here's your video: \"${video.title || 'Untitled Video'}\". You can ask me to enhance it, modify it, or create variations. What would you like to do?`,\n          timestamp: new Date(),\n          videoUrl: video.videoUrl,\n          videoId: video.videoId,\n          status: video.status\n        }\n      ];\n      dispatch({ type: 'SET_MESSAGES', payload: seed });\n    }\n    dispatch({ type: 'SET_CURRENT_VIDEO', payload: video });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    sendMessage,\n    clearMessages,\n    setCurrentVideo,\n    openChatForVideo,\n    clearError\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}